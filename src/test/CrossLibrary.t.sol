pragma solidity 0.8.13;

import "../Merkle.sol";
import "forge-std/Test.sol";

contract StandardizedInputTest is Test {

    // Contracts (to be migrated to libraries)
    Merkle m;
    bytes32[100] data;

    function setUp() public {
        m = new Merkle();
    }
    
    function testMerkleRootMatchesJSImplementation() public {
        string[] memory runJsInputs = new string[](6);
        runJsInputs[0] = 'npm';
        runJsInputs[1] = '--prefix';
        runJsInputs[2] = 'cross-testing/scripts/';
        runJsInputs[3] = '--silent';
        runJsInputs[4] = 'run';
        runJsInputs[5] = 'generate-root';
        bytes memory jsResult = vm.ffi(runJsInputs);
        bytes32 jsGeneratedRoot = abi.decode(jsResult, (bytes32));
        //emit log_bytes32(jsGeneratedRoot);

        string[] memory loadJsDataInputs = new string[](2);
        loadJsDataInputs[0] = "cat";
        // this file is generated by the JS script and contains the 
        // leafs that generated the jsRoot
        loadJsDataInputs[1] = "cross-testing/data/input";
        bytes memory loadResult =  vm.ffi(loadJsDataInputs);
        data  = abi.decode(loadResult, (bytes32[100]));
        bytes32 murkyGeneratedRoot = m.getRoot(_getData()); // converts storage data array to memory
        //emit log_bytes32(murkyGeneratedRoot);
        assertEq(murkyGeneratedRoot, jsGeneratedRoot);
    }

    function _getData() public view returns (bytes32[] memory) {
        bytes32[] memory _data = new bytes32[](data.length);
        uint length = data.length;
        for (uint i = 0; i < length; ++i) {
            _data[i] = data[i];
        }
        return _data;
    }
}